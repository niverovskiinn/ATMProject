// <auto-generated />
using System;
using Engine.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Engine.Migrations
{
    [DbContext(typeof(AtmDbContext))]
    partial class AtmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountMoney");

                    b.Property<DateTime>("Creation");

                    b.Property<string>("Notes");

                    b.Property<string>("OwnerPassport");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerPassport");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Models.Card", b =>
                {
                    b.Property<string>("Number")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16);

                    b.Property<int>("AccountId");

                    b.Property<string>("Cvv2");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("Notes");

                    b.Property<string>("PinHash");

                    b.HasKey("Number");

                    b.HasIndex("AccountId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Models.Enum.AccountStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AccountStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Active account",
                            Name = "Active"
                        },
                        new
                        {
                            Id = 0,
                            Description = "Closed account",
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Frozen account",
                            Name = "Frozen"
                        });
                });

            modelBuilder.Entity("Models.Enum.AccountType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Credit account",
                            Name = "Credit"
                        },
                        new
                        {
                            Id = 0,
                            Description = "Debit account",
                            Name = "Debit"
                        });
                });

            modelBuilder.Entity("Models.Enum.TransactionType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Withdraw cash from ATM",
                            Name = "Withdraw"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Send money to another person",
                            Name = "ToUser"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Deposit money to account",
                            Name = "Deposit"
                        });
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountFromId");

                    b.Property<int?>("AccountToId");

                    b.Property<decimal>("AmountMoney");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Notes");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AccountFromId");

                    b.HasIndex("AccountToId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<string>("Passport")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8);

                    b.Property<string>("ApartmentNum");

                    b.Property<string>("City");

                    b.Property<DateTime>("DateBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("HouseNum");

                    b.Property<string>("LastName");

                    b.Property<string>("Notes");

                    b.Property<string>("Patronymic");

                    b.Property<string>("Street");

                    b.Property<string>("TaxNumber");

                    b.Property<string>("Telephone1");

                    b.Property<string>("Telephone2");

                    b.Property<string>("Telephone3");

                    b.HasKey("Passport");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.HasOne("Models.User", "Owner")
                        .WithMany("Accounts")
                        .HasForeignKey("OwnerPassport");

                    b.HasOne("Models.Enum.AccountStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Models.Enum.AccountType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Models.Card", b =>
                {
                    b.HasOne("Models.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.HasOne("Models.Account", "From")
                        .WithMany()
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Account", "To")
                        .WithMany()
                        .HasForeignKey("AccountToId");

                    b.HasOne("Models.Enum.TransactionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
